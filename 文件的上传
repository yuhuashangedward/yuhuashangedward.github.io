相信大家在做项目的时候，经常会用到文件的上传；本文会对文件上传做一些总结希望对大家有所启发，共同学习，多多支持！

前台的处理———讨论前端在处理上传时常用的几种方式
1.表单上传
    这是传统的form表单上传，使用form表单的input[type="file"]控件，可以打开系统的文件选择对话框，从而达到选择文件并上传的目的，它的好处是多浏览器兼容，它是web开发者最常用的一种文件上传方式。
    
    表单的代码如下：
    <form method="post" action="http://uploadUrl" enctype="multipart/form-data">
        <input name="file" type="file" accept="image/gif,image.jpg" />
        <input name="token" type="hidden"  />
        <input type="submit" value="提交">
    </form>
    
    以下是表单上传的几个关键点：
    method="post" :采用post方式提交数据
    enctype="multipart/form-data" :采用multipart格式上传文件，此时request头会显示Content-Type:multipart/form-data; boundary=—-WebKitFormBoundaryzr34cwJ67R95KQC9
    action:标明上传的服务器端地址
    type="file" :使用input的file控件上传
    
    如果是多文件批量上传，可以将input[type="file"]的name属性设置为name="file[]"
    accept属性是HTML5的新属性，它规定了可通过文件上传提交的数据类型
    上传的触发事件可以是：input[type="file"]的onChange触发，也可以由一个独立的按钮的onClick使整个表单提交，此时还可以用input[type="hidden"]带一些其他的参数，比如Token来源验证等等。
    
2.Ajax无刷新上传
    Ajax无刷新上传的方式，本质上与表单上传无异，只是把表单里的内容提出来采用ajax提交，并且由前端决定请求结果回传后的展示结果，不用像直接表单上传那样刷新和跳转页面。在这里，我们采用jQuery来作为操作DOM和创建ajax提交的js基础库。
    HTML代码片段如下：
    <form>
        <input id="file" name="file" type="file" />
        <input id="token" name="token" type="hidden" />
    </form>
    
    javascript代码片段如下：
    $("#file").on("change",function(){
      var formData=new FormData();
      formData.append("file", $("#file")[0].files);
      formData.append("token", $("#token").val());
      $.ajax({
            url:"http://uploadUrl",
            type:"POST",
            data:formData,
            processData:false,
            contentType:false,
            success:function(response){
                    // 根据返回结果指定界面操作
            }
         });
    });

    我们使用了file控件的change来触发上传事件，当然你也可以使用某个按钮来触发表单提交。提交数据时，用到了FormData对象来发送二进制文件，FormData构造函数提供的append()方法，除了直接添加二进制文件还可以附带一些其他的参数，作为HttpRequest实例的参数提交给服务端。
    
    使用jQuery提供的ajax方法来发送二进制文件，还需要附加两个参数：
    processData:false   //不要对data参数进行序列化处理，默认为true
    contentType:false   //不要设置Content-Type请求头，因为文件数据是以multipart/form-data来编码
    
    
3.利用ajax和jquery.form.js实现文件上传
    html片段如下：
    <script type="text/javascript" src="<%=basePath %>js/jquery-1.8.3.min.js"></script>
        <script type="text/javascript" src="<%=basePath %>js/jquery.form.js"></script>

        <!--form表单，异步提交一定使用submit按钮，form配置如下-->

 <form id="userForm" method="post" action="" enctype="multipart/form-data" class="bl-form bl-formhor fl">
           <table>
  　　　　<tr>
          <td class="Taa"><label for="enterpriseName">*企业名称：</label></td>
          <td class="Tbb"><input type="text" name="enterpriseName" id="enterpriseName" readOnly class="inp1"/></td>
        </tr>
        <tr>
          <td class="Taa">身份证图片：</td>
          <td><a href="javascript:;" class="btn btn2 a_uplaod"><input type="file" name="identitypic" id="pic" onchange="javascript:setImagePreview();">上传图片</a></td>
        </tr>        
      </table>
        <input type="button" value="确认升级"  class="mg btn btn2 d2-5" onclick="ajaxSubmitForm();"/>
          <input type="button" value="清除"  class=" btn btn2 d2-5" onclick="resetForm();"/>
         </form>
    注意需要引入jquery.form.js。
    
    javascript代码如下：
    <script type="text/javascript">
    function ajaxSubmitForm() {
   　　　　var option = {
         　　 url : '${pageContext.request.contextPath}/userController/upgradeUser_form',
        　　  type : 'POST',
         　　 dataType : 'json',
         　　 headers : {"ClientCallMode" : "ajax"}, //添加请求头部
        　　  success : function(data) {
           　　   if("success"==data.resultMessage){
           　　    alert("个人用户已成功升级为企业用户！");
              }
              else{
               alert("企业用户升级失败,请联系管理员！");
               return;
              }
          },
          error: function(data) {
              alert("企业用户升级失败,请联系管理员！");
          }
       };
      $("#userForm").ajaxSubmit(option);  //通过jquery.form.js帮助我们构建form表单并进行异步提交
      return false; //最好返回false，因为如果按钮类型是submit,则表单自己又会提交一次;返回false阻止表单再次提交
  }
  </script>
    
    
4.Flash上传
    很多时候上传的需求要求显示上传进度、中断上传过程、大文件分片上传等等，这时传统的表单上传很难实现这些功能，于是产生了使用Flash上传的方式，它采用Flash作为一个中间代理层，代替客户端跟服务器端通信，此外，它也对客户端的文件选择方面拥有更多的控制权，比input[type="file"]要大得多。
    
    在这里我们使用jQuery封装好的uploadify插件来进行演示，一般这类插件都自带了上传用的Flash文件，因为跟服务端回传的数据和展示跟客户端的交互，都是Flash文件的接口跟插件来对接的。
    HTML部分：
    <div id="file_upload"></div>
    html部分很简单，预留一个hook后，插件会在这个节点内部创建Flash的object，并且还附带创建了上传进度、取消控件和多文件队列展示等界面。
    
    javascript部分：
    $(function() {
  $("#file_upload").uploadify({
      auto: true,
      method: "Post",
      width: 120,
      height: 30,
      swf: './uploadify.swf',
      uploader: 'http://uploadUrl',
      formData: {
          token: $("#token").val()
      },
      fileObjName: "file",
      onUploadSuccess: function(file, data, response){
          // 根据返回结果指定界面操作
      }
  });
});

关于jQuery.uploadify可以访问了解： http://www.uploadify.com/documentation/ 。值得注意的是flash并不适合手机端应用，更好的解决方案是使用flash+html5来解决平台的兼容性问题。

5.截图黏贴上传
    我们发现现在有好多上传应用已经提供了截图粘贴上传功能，如WebUploader，它就支持QQ截图然后粘贴上传。
    首先，截图粘贴上传的核心思想是，监听粘贴事件，然后获取剪切板中的数据，如果是一张图片，则触发上传事件。
代码片段如下：
    $("textarea").on("paste", function(e){
   e.stopPropagation();
   var self = this;
   var clipboardData = e.originalEvent.clipboardData;
   if (clipboardData.items.length <= 0) {
       return;
   }
   var file = clipboardData.items[0].getAsFile();
   if (!file) {
       return;
   }
   var formData = new FormData();
   formData.append("file", file);
   formData.append("token", $("#token").val());
   $.ajax({
       url: "http://uploadUrl",
       type: "POST",
       data: formData,
   }).done(function(response) {
       // 根据返回结果指定界面操作
   });
   e.preventDefault();
});

从上面代码可以看出，上传的过程都是一样的，主要是获取文件的方式。 当进行粘贴（右键paste/ctrl+v）操作时，触发剪贴板事件’paste’，从系统剪切板获取内容，而系统剪切板的数据在不同浏览器保存在不同的位置：

IE内核：windows.clipboardData
其它：e.originalEvent.clipboardData

6.拖拽上传
    拖拽上传的方式，支持的浏览器比较少，因为它用到了HTML5的两个新的属性（API）一个是Drag and Drop,一个是File API。
上传域监听拖拽的三个事件：dragEnter、dragOver和drop，分别对应拖拽至、拖拽时和释放三个操作的处理机制，当然你也可以监听dragLeave事件。
HTML5的File API提供了一个FileList的接口，它可以通过拖拽事件的e.dataTransfer.files来传递的文件信息，获取本地文件列表信息。
File API在HTML5规范中只是草案，在 W3C 草案中，File 对象只包含文件名、文件类型和文件大小等只读属性。但部分浏览器在草案之外提供了一个名为 FileReader 的对象，用以读取文件内容，并且可以监控读取状态，它提供的方法有： “readAsBinaryString” ，”readAsDataURL” ，”readAsText” ，”abort” 等。

    代码片段如下：
    // dragenter
$("#textarea").on("dragenter", function(e){
    e.preventDefault();
});
// dragover
$("#textarea").on("dragover", function(e){
    e.preventDefault();
});
// drop
$("#textarea").on("drop", function(e){
    e.stopPropagation();
    e.preventDefault();
    var files = e.originalEvent.dataTransfer.files;
    _.each(files, function(file) {
        if (!/^image*/.test(file.type)) {
          return;
        }
        var fileReader = new FileReader();
        fileReader.onload = function() {
          //uploadFile(file);
        };
        fileReader.readAsDataURL(file);
    });
});

拖拽上传过程中的几个关键点：

在drop事件触发后通过e.dataTransfer.files获取拖拽文件列表，在jQuery中是e.originalEvent.dataTransfer.files
拖拽上传仅支持图片，文件对象中file.type标识了文件类型。
由于可能是多图拖拽，所以可以遍历图片上传，这里用了Underscore的each方法。
这里用readAsDataURL读取文件内容为二进制文件，你还可以将其转换为Base64方式上传，只是http协议里面存在对非二进制数据的上传大小限制为2M。
上传的过程跟前面的方式相同，即：创建FormData对象并发起Ajax请求。
拍照上传

拍照上传可以是PC上的摄像头拍照上传也可以是手机等移动设备的拍照上传。手机上的拍照上传最常见就是我们使用微信发照片了。

手机实现拍照上传的代码：
<input type=file accept="image/*">
<input type=file accept="video/*">
ios 有拍照、录像、选取本地图片功能，部分android只有选取本地图片功能。

7.上传与安全
    上传文件时必须做好文件的安全性，除了前端必要的验证，如文件类型、后缀、大小等验证，重要的还是要在后台做安全策略。

这里我列举几个注意点：
    后台需要进行文件类型、大小、来源等验证
    定义一个.htaccess文件，只允许访问指定扩展名的文件。
    将上传后的文件生成一个随机的文件名，并且加上此前生成的文件扩展名。
    设置上传目录执行权限，避免不怀好意的人绕过如图片扩展名进行恶意攻击，拒绝脚本执行的可能性。




后台的几种常见的处理方式：
1.Servlet3之前的实现（输入流实现）
    
    在servlet3以前，servletAPI中没有支持文件上传功能的API，因此要实现上传功能需要引入第三方工具从POST请求中获得上传的附件或者自行处理输入流来获得上传的文件，我们推荐使用Apache的commons-fileupload。
    现举例如下：
    HTML代码：
    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>上传文件</title>
<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
<meta http-equiv="description" content="this is my page">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="css/style.css">
</head>

<body>
<form action="servlet/UploadServlet" method="post" enctype="multipart/form-data">
<div align="center"><br/>
    <fieldset style="width:90%">
        <legend>上传文件</legend><br/>
        <div class='line'>
            <div align='left' class="leftDiv">上传文件一</div>
            <div align='left' class="rightDiv">
                <input type="file" name="file1" class="text">
            </div>
        </div>
        <div class='line'>
            <div align='left' class="leftDiv">上传文件二</div>
            <div align='left' class="rightDiv">
                <input type="file" name="file2" class="text">
            </div>
        </div>
        <div class='line'>
            <div align='left' class="leftDiv">上传文件说明一</div>
            <div align='left' class="rightDiv"><input type="text" name="description1" class="text"></div>
        </div>
        <div class='line'>
            <div align='left' class="leftDiv">上传文件说明二</div>
            <div align='left' class="rightDiv"><input type="text" name="description2" class="text"></div>
        </div>
        <div class='line'>
            <div align='left' class="leftDiv"></div>
            <div align='left' class="rightDiv"><br/>
                <input type="submit" value="  上传文件  " class="button">
            </div>
        </div>
    </fieldset>
</div>
</form>
</body>
</html>

    客户端运行的代码很简单，服务器要复杂一点。要想获取其中的内容，必须根据HTTP协议所规定的格式来解析浏览器提交的Request. 
解析二进制流比较麻烦。已经有许多类库已经完成了这项工作，例如SmartUpload与Apache Commons Fileupload.SmartUpload是一个商业类库，解析Request过程中数据存放在内存里，因此速度较快，但上传较大文件时会发生内存溢出。Apache Commons Fileupload是一个免费的开源的类库。一些框架比如Struts里集成了Apache Common Fileupload类库来实现文件上传。 

    package com.helloweenvsfei.servlet;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;

public class UploadServlet extends HttpServlet {

    private static final long serialVersionUID = 7523024737218332088L;

    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setCharacterEncoding("UTF-8");
        response.getWriter().println("请以 POST 方式上传文件");
    }

    @SuppressWarnings("unchecked")
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        File file1 = null, file2 = null;
        String description1 = null, description2 = null;

        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");
        out.println("<HTML>");
        out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");
        out.println("  <link rel='stylesheet' type='text/css' href='../css/style.css'>");
        out.println("  <BODY>");

        out.println("<div align=center><br/>");
        out.println("<fieldset style='width:90%'><legend>上传文件</legend><br/>");

        out.println("       <div class='line'>");
        out.println("           <div align='left' class='leftDiv'>上传日志：</div>");
        out.println("           <div align='left' class='rightDiv'>");

        // 使用 DiskFileUpload 对象解析 request
        DiskFileUpload diskFileUpload = new DiskFileUpload();
        try {
            // 将 解析的结果 放置在 List 中
            List<FileItem> list = diskFileUpload.parseRequest(request);
            out.println("遍历所有的 FileItem ... <br/>");
            // 遍历 list 中所有的 FileItem
            for(FileItem fileItem : list){
                if(fileItem.isFormField()){
                    // 如果是 文本域
                    if("description1".equals(fileItem.getFieldName())){
                        // 如果该 FileItem 名称为 description1
                        out.println("遍历到 description1 ... <br/>");
                        description1 = new String(fileItem.getString().getBytes(), "UTF-8");
                    }
                    if("description2".equals(fileItem.getFieldName())){
                        // 如果该 FileItem 名称为 description2
                        out.println("遍历到 description2 ... <br/>");
                        description2 = new String(fileItem.getString().getBytes(), "UTF-8");
                    }
                }
                else{
                    // 否则，为文件域
                    if("file1".equals(fileItem.getFieldName())){
                        // 客户端文件路径构建的 File 对象
                        File remoteFile = new File(new String(fileItem.getName().getBytes(), "UTF-8"));
                        out.println("遍历到 file1 ... <br/>");
                        out.println("客户端文件位置: " + remoteFile.getAbsolutePath() + "<br/>");
                        // 服务器端文件，放在 upload 文件夹下
                        file1 = new File(this.getServletContext().getRealPath("attachment"), remoteFile.getName());
                        file1.getParentFile().mkdirs();
                        file1.createNewFile();

                        // 写文件，将 FileItem 的文件内容写到文件中
                        InputStream ins = fileItem.getInputStream();
                        OutputStream ous = new FileOutputStream(file1);

                        try{
                            byte[] buffer = new byte[1024]; 
                            int len = 0;
                            while((len=ins.read(buffer)) > -1)
                                ous.write(buffer, 0, len);
                            out.println("已保存文件" + file1.getAbsolutePath() + "<br/>");
                        }finally{
                            ous.close();
                            ins.close();
                        }
                    }
                    if("file2".equals(fileItem.getFieldName())){
                        // 客户端文件路径构建的 File 对象
                        File remoteFile = new File(new String(fileItem.getName().getBytes(), "UTF-8"));
                        out.println("遍历到 file2 ... <br/>");
                        out.println("客户端文件位置: " + remoteFile.getAbsolutePath() + "<br/>");
                        // 服务器端文件，放在 upload 文件夹下
                        file2 = new File(this.getServletContext().getRealPath("attachment"), remoteFile.getName());
                        file2.getParentFile().mkdirs();
                        file2.createNewFile();

                        // 写文件，将 FileItem 的文件内容写到文件中
                        InputStream ins = fileItem.getInputStream();
                        OutputStream ous = new FileOutputStream(file2);

                        try{
                            byte[] buffer = new byte[1024]; 
                            int len = 0;
                            while((len=ins.read(buffer)) > -1)
                                ous.write(buffer, 0, len);
                            out.println("已保存文件" + file2.getAbsolutePath() + "<br/>");
                        }finally{
                            ous.close();
                            ins.close();
                        }
                    }
                }
            }
            out.println("Request 解析完毕");
        } catch (FileUploadException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        out.println("           </div>");
        out.println("       </div>");

        if(file1 != null){
        out.println("       <div class='line'>");
        out.println("           <div align='left' class='leftDiv'>file1：</div>");
        out.println("           <div align='left' class='rightDiv'>");
        out.println("               <a href='" + request.getContextPath() + "/attachment/" + file1.getName() + "' target=_blank>" + file1.getName() +  "</a>"   );
        out.println("           </div>");
        out.println("       </div>");
        }

        if(file2 != null){
        out.println("       <div class='line'>");
        out.println("           <div align='left' class='leftDiv'>file2：</div>");
        out.println("           <div align='left' class='rightDiv'>");
        out.println("               <a href='" + request.getContextPath() + "/attachment/" + URLEncoder.encode(file2.getName(), "UTF-8") + "' target=_blank>" + file2.getName() +  "</a>"   );
        out.println("           </div>");
        out.println("       </div>");
        }


        out.println("       <div class='line'>");
        out.println("           <div align='left' class='leftDiv'>description1：</div>");
        out.println("           <div align='left' class='rightDiv'>");
        out.println(description1);
        out.println("           </div>");
        out.println("       </div>");

        out.println("       <div class='line'>");
        out.println("           <div align='left' class='leftDiv'>description2：</div>");
        out.println("           <div align='left' class='rightDiv'>");
        out.println(description2);
        out.println("           </div>");
        out.println("       </div>");

        out.println("</fieldset></div>");

        out.println("  </BODY>");
        out.println("</HTML>");
        out.flush();
        out.close();
    }

}

2.Servlet3之后变得极其简单<原生servlet实现>



3.Struts2文件上传（基于表单的文件上传）


4.springMVC文件上传


5.springBoot实现文件上传


文件存储位置的几种探讨：

1.存到Tomcat项目下的文件夹内

2.存到FastDFS文件存储系统

3.存到MongoDB数据库中

4.存到公司现有的文件系统中

